/*
 * -------------------------------------------------
 *  nf-core/deepvariant Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

 // Global default params, used in configs
 params {

   container = 'nfcore/deepvariant:dev'

   help = false
   outdir = './RESULTS-DeepVariant'

   // Defaults
   igenomes_base = "./iGenomes"
   tracedir = "${params.outdir}/pipeline_info"
   clusterOptions = false
   awsqueue = false
   awsregion = 'eu-west-1'
   // TODO: Remove this if/when we can. See https://github.com/nextflow-io/nextflow/issues/840
   pipelineVersion = '1.0dev'
 }

process.container = 'nfcore/deepvariant:dev'

docker {
  enabled=true
}

profiles{

  s3{
    params.modelFolder="s3://deepvariant-test/models"
    params.fasta="s3://deepvariant-test/input/ucsc.hg19.chr20.unittest.fasta";
    params.fai="s3://deepvariant-test/input/ucsc.hg19.chr20.unittest.fasta.fai";
    params.fastagz="s3://deepvariant-test/input/ucsc.hg19.chr20.unittest.fasta.gz";
    params.gzfai="s3://deepvariant-test/input/ucsc.hg19.chr20.unittest.fasta.gz.fai";
    params.gzi="s3://deepvariant-test/input/ucsc.hg19.chr20.unittest.fasta.gz.gzi";
    params.bam_folder="s3://deepvariant-test/input/";
  }

  s3wholeGenome{
    params.fasta="s3://dv-testfiles/hg19.fa";
    params.fai="s3://dv-testfiles/hg19.fa.fai";
    params.fastagz="s3://dv-testfiles/hg19.fa.gz";
    params.gzfai="s3://dv-testfiles/hg19.fa.gz.fai";
    params.gzi="s3://dv-testfiles/hg19.fa.gz.gzi";
    params.bam="s3://dv-testfiles/"

  }
  localtest
  {
    params.bam_folder="$baseDir/data";
    params.fasta="$baseDir/data/hg19.fa";
    params.fai="$baseDir/data/hg19.fa.fai";
    params.fastagz="$baseDir/data/hg19.fa.gz";
    params.gzfai="$baseDir/data/hg19.fa.gz.fai";
    params.gzi="$baseDir/data/hg19.fa.gz.gzi";
  }
  s3g38whole{
    params.fasta="s3://gencode.38/GRCh38.p10.genome.fa"
    params.bam_folder="s3://dv-testfiles/g38Bam/"
  }

  standard {
  includeConfig 'conf/base.config'
  }
  conda { process.conda = "$baseDir/environment.yml" }
  docker {
    docker.enabled = true
    process.container = params.container
  }
  singularity {
    singularity.enabled = true
    process.container = {"shub://${params.container.replace('nfcore', 'nf-core')}"}
  }
  awsbatch {
    includeConfig 'conf/base.config'
    includeConfig 'conf/awsbatch.config'
    includeConfig 'conf/igenomes.config'
  }
  test {
    includeConfig 'conf/base.config'
    includeConfig 'conf/test.config'
  }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  none {
    // Don't load any config (for use with custom home configs)
  }

}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/nf-core/deepvariant_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/nf-core/deepvariant_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/nf-core/deepvariant_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/nf-core/deepvariant_dag.svg"
}

manifest {
  name = 'nf-core/deepvariant'
  author = 'Phil Palmer'
  homePage = 'https://github.com/nf-core/deepvariant'
  description = 'UNDER DEVELOPMENT: Deep Variant as a Nextflow pipeline'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.32.0'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
